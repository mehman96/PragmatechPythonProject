docker -contanier texnologiyasindan istifade eden texnologiyadir.
Contanier- linux da kernelinə yazilan emeliyyat sistem virtiuallasdirmaq
ucun texnologiyadir
Bunun esas ferqi odur ki (virtiul masina) ehtiyac olmur yeni Virtualbox, Vmware? Hyper-V və.s
virtual masinda bele idiki meselen 1 app linux da bir app Mac di
onun ucun heresi ucun ayri ayri emeliyyat sistemi yuklemeli idik.
hem vaxt cox alir , hem ram ,yaddas cox istifade edir. Bununla yanasi komputerimizde guclu olmalidir.
Docker olmadan sistemi run etmek həqiqətən yorucu ola bilər cunki vaxt cox alir, lakin indi docker ilə bunu saniyələr ərzində edə bilərsiniz.

Contanier- hər bir proqramın işləməsi üçün yeni bir əməliyyat sisteminə ehtiyac duymur. 
Docker Conianter –lər bir-birindən təcrid olunmuş formada çalışır 
Container texnologiyası Virtual masinlara nisbətən daha az qaynaq sərf edir.
Hər bir konteyner image əsasında yaradılır.age, konteyneri işə salmaq üçün lazım olan bütün məlumatları özündə birləşdirir. 

docker image əsasında yaradılacaq konteyner daxilindəki konfiqurasiya məlumatları, hansı servisin işə düşəcəyi və s. bu kimi məlumatlar docker engine tərəfindən əldə olunur. 
Docker İmage(setup) -  konteynerlər üçün şablondur və konteynerləri yaratmaq üçün bir növ nümunə rolunu oynayır. Hər bir image-in bazası mövcuddur, məs, ubuntu, fedora və s. 
İmage-lər üst üstə yığılmış bir neçə qatdan ibarət olur.işlətmək istədiyimiz proqramların paketlənmiş versiyalarıdır.
imageler run olanda contanier olur

docker - go dilinde yazilib

docker hub - hazir imageler install yuklemek ucun (docker pull ubuntu ) misal olaraq(registry)
deamon - imagele komputerle docker  arasinda kes yaddas rolunu oynayir. 


docker file - developerler terefinden hazir yazilmis kodlardi
docker engine - Linux emeliyyat sisteminde isleyir
docker build
hun


sudo docker version -  docker olub olmadigini yoxlamaq ucun 

imageler yuklemek 
sudo docker pull hello-world (image adi )

image run etmek(contanier yaratmaq)
sudo docker run hello-world (image adi )

sudo docker ps-a 
yuklediyimiz imagelerin siyahisi (ne vaxt yaratmisiq , aktiv ve ya olmadigini gosterir )

sudo docker system prune -a - yaddasda olan imageleri silir
sudo docker image


eger image silib 
sudo docker run hello-world (image adi )
localda tapa bilmesede ama yukluyur, sebeb deamon du o kes yaddas kimidir.imageler deamon
ustune yuklenir , deamondan image yukleyende birinci ozunde baxir varsa onu qaytarir yoxdusa docker hub dan cekib getirir

export FLASK_APP=main.py
flask run

WORKDIR /code - ubuntuda code fayl yarat ve daxil ol
COPY .. - butun fayllar gelsin code papkasina
noqtenin biri butun fayllar ikinci noqte ise code folderine yuklenmesi ucundu

RUN pip install -r  requirements.txt
app run olmasi ucun lazim olan txt faylini run et

esas file nedirse onu gostermek(hansi python file run olsun)
ENV FLASK_APP=main.py

CMD [ "flask" ,'run' ] 

docker file image cevirmek
sudo docker build . 
noqte burda docker file gosterir yeni bu directorda olan docker file

sudo docker build -t web_images:latest .

sudo docker run image adı

sudo docker ps - run olunan imageleri gosterir....


volume- datalari saxliyir (contanier sonenden sora)
docker compose up -d
docker compose down

sudo  docker container ls
sudo docker rm -rf -activ imageler silir.

If lsof -i :5432 doesn't show you any output, you can use sudo ss -lptn 'sport = :5432' to see what process is bound to the port.
sudo ss -lptn 'sport = :5432'

docker ps - imagelerin siyahis
contanier run etmek
docker exec -it image id -si bash
docker contanier ls-contanier siyahisi(aktivdi ya sonuludu)
docker compose - python- da yazılıb bir neçə image run etmək üçündür.(hazır dockeri run edir)



docker images
Lokal registery’de mevcut bulunan Image’ları listeler

docker ps
Halihazırda çalışmakta olan Container’ları listeler

docker ps -a
Docker Daemon üzerindeki bütün Container’ları listeler

docker ps -aq
Docker Daemon üzerindeki bütün Container’ların ID’lerini listeler

Docker pull <repository_name>/<image_name>:<image_tag>
Belirtilen Image’ı lokal registry’ye indirir. Örnek: docker pull gsengun/jmeter3.0:1.7

docker top <container_id>
İlgili Container’da top komutunu çalıştırarak çıktısını gösterir

docker run -it <image_id|image_name> CMD
Verilen Image’dan terminal’i attach ederek bir Container oluşturur

docker pause <container_id>
İlgili Container’ı duraklatır

docker stop <container_id>
İlgili Container’ı durdurur

docker start <container_id>
İlgili Container’ı durdurulmuşsa tekrar başlatır

docker rm <container_id>
İlgili Container’ı kaldırır fakat ilişkili Volume’lara dokunmaz

docker rm -v <container_id>
İlgili Container’ı ilişkili Volume’lar ile birlikte kaldırır

docker rm -f <container_id>
İlgili Container’ı zorlayarak kaldırır. Çalışan bir Container ancak - f ile kaldırılabilir

docker rmi <image_id|image_name>
İlgili Image’ı siler

docker rmi -f <image_id|image_name>
İlgili Image’ı zorlayarak kaldırır, başka isimlerle Tag’lenmiş Image’lar -f ile kaldırılabilir

docker info
Docker Daemon’la ilgili özet bilgiler verir

docker inspect <container_id>
İlgili Container’la ilgili detaylı bilgiler verir

docker inspect <image_id|image_name>
İlgili Image’la ilgili detaylı bilgiler verir

docker rm $(docker ps -aq)
Bütün Container’ları kaldırır

docker stop $(docker ps -aq)
Çalışan bütün Container’ları kaldırır

docker rmi $(docker images -aq)
Bütün Image’ları kaldırır

docker images -q -f dangling=true
Dangling (taglenmemiş ve bir Container ile ilişkilendirilmemiş) Image’ları listeler

docker rmi $(docker images -q -f dangling=true)
Dangling Image’ları kaldırır

docker volume ls -f dangling=true
Dangling Volume’ları listeler

docker volume rm $(docker volume ls -f dangling=true -q)
Danling Volume’ları kaldırır

docker logs <container_id>
İlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir

docker logs -f <container_id>
İlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir ve -f follow parametresi ile o andan sonra oluşan logları da göstermeye devam eder

docker exec <container_id> <command>
Çalışan bir Container içinde bir komut koşturmak için kullanılır

docker exec -it <container_id> /bin/bash
Çalışan bir Container içinde terminal açmak için kullanılır. İlgili Image’da /bin/bash bulunduğu varsayımı ile

docker attach <container_id>
Önceden detached modda -d başlatılan bir Container’a attach olmak için kullanılır
